generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  consentedToAI Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  healthData    HealthData?
  familyMembers FamilyMember[]
}

model FamilyMember {
  id            String         @id @default(uuid())
  userId        String
  name          String
  relationship  String
  consentedToAI Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  healthData    HealthData?

  @@index([userId])
}

model HealthData {
  id               String        @id @default(uuid())
  userId           String?       @unique
  familyMemberId   String?       @unique
  weight           Float?
  height           Float?
  bloodPressure    String?
  heartRate        Int?
  bloodType        String?
  allergies        String[]
  medications      String[]
  conditions       String[]
  pregnancyStage   String?
  lastCheckup      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyMember     FamilyMember? @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)
}

model Conversation {
  id             String        @id @default(uuid())
  userId         String
  familyMemberId String?
  title          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyMember   FamilyMember? @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@index([userId])
  @@index([familyMemberId])
  @@index([createdAt])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  role           String
  content        String       @db.Text
  usedHealthData Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

model AIMetrics {
  id              String   @id @default(uuid())
  userId          String
  conversationId  String
  tokensUsed      Int
  responseTime    Int
  model           String
  promptType      String
  success         Boolean
  errorMessage    String?
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}
